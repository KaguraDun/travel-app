{"version":3,"sources":["services/http.service.ts","components/AttractionCard/AttractionCard.tsx","components/Attractions/Attractions.tsx","components/CapitalTime/CapitalTime.tsx","components/CountryInfo/CountyInfo.tsx","components/CountryPageTitle/CountryPageTitle.tsx","components/CurrencyConverter/CurrencyConverter.tsx","components/LanguageSwitcher/LanguageSwitcher.tsx","components/Search/Search.tsx","components/Header/Header.tsx","components/Map/Map.tsx","components/Video/Video.tsx","components/Weather/WeatherData/WeatherData.tsx","components/Weather/Weather.tsx","components/CountryPage/CountryPage.tsx","components/Footer/Footer.tsx","components/CountryCard/CountryCard.tsx","components/SearchResult/SearchResults.tsx","components/WorldMapBlock/WorldMapBlock.tsx","components/MainPage/MainPage.tsx","components/TravelApp/TravelApp.tsx","reportWebVitals.ts","index.tsx"],"names":["openTripMapApiKey","CountryService","fetchAllCountries","a","fetch","fetchCountry","country","apiCountriesUrl","fetchCountryInfoByName","lang","apiCountryInfoUrl","fetchCapitalCoordinates","countryCode","capital","url","fetchCapitalAttractions","radius","lon","lat","fetchAttractionInfo","xid","fetchAttractionVideo","properties","fetchWeather","cityName","fetchCurrency","AttractionCard","attraction","useState","attractionInfo","setAttractionInfo","useEffect","then","response","json","info","isInfoReceived","error","text","wikipedia_extracts","imageUrl","preview","source","kinds","replace","className","name","src","Attractions","countryData","capitalAttractions","setCapitalAttractions","alpha2Code","coordinates","attractions","attractionsList","map","arrows","dots","infinite","slidesToShow","CapitalTime","time","setTime","cityLookup","cityTimezones","dateProperties","timeZone","timezone","day","month","weekday","hour","hour12","minute","second","setInterval","Date","toLocaleString","CountryInfo","countryDetail","dangerouslySetInnerHTML","__html","extract","CountryPageTitle","flag","style","width","height","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","CurrencyConverter","countryCurrencies","currency","setCurrency","code","data","currencyRates","rates","Object","entries","key","val","component","toFixed","push","symbol","LanguageSwitcher","value","Search","searchHandler","searchValue","FormControl","onChange","e","target","onFocus","select","placeholder","Header","isMainPage","search","Navbar","bg","expand","to","containerStyle","Map","center","latlng","lng","googleMapsApiKey","mapContainerStyle","zoom","Video","countryName","video","setVideo","isVideoReceived","items","controls","id","videoId","WeatherData","weather","main","temp","description","icon","Weather","setWeather","weatherInfo","CountryPage","setCountryDetail","setCountryData","useLocation","pathname","split","countryInfo","values","query","pages","console","log","Container","Row","currencies","Footer","ListGroup","horizontal","Item","href","alt","CountryCard","item","nativeName","Card","Img","variant","Body","Title","Subtitle","Text","SearchResults","searchResult","toLocaleLowerCase","WorldMapBlock","countries","onClickAction","display","justifyContent","backgroundColor","color","onClickFunction","size","title","value-suffix","MainPage","countriesList","randomCountriesList","setSearchValue","header","searchResultCountries","filter","includes","worldMapData","population","event","isoCode","prefix","suffix","clickedCountry","find","TravelApp","setCountriesList","setRandomCountriesList","shuffledArray","array","newArr","slice","i","length","j","Math","floor","random","shuffleArray","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFCP","getFID","getLCP","getTTFB","document","getElementById"],"mappings":"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","file":"static/js/main.3b1ebdde.chunk.js","sourcesContent":["const openTripMapApiKey =\r\n  '5ae2e3f221c38a28845f05b65947648325a329e2626a4b6b7f12a1df';\r\n\r\nexport const CountryService = {\r\n  fetchAllCountries: async () => {\r\n    const apiCountriesUrl = 'https://restcountries.eu/rest/v2/';\r\n    return fetch(apiCountriesUrl);\r\n  },\r\n\r\n  fetchCountry: async (country: string) => {\r\n    const apiCountriesUrl = `https://restcountries.eu/rest/v2/name/${country}`;\r\n    return fetch(apiCountriesUrl);\r\n  },\r\n\r\n  fetchCountryInfoByName: async (country: string, lang = 'en') => {\r\n    if (country === 'russian federation') {\r\n      return fetch(`https://${lang}.wikipedia.org/w/api.php?action=query&origin=*&prop=extracts&format=json&exintro=&titles=russia`);\r\n    }\r\n\r\n    if (country === 'united states of america') {\r\n      return fetch(`https://${lang}.wikipedia.org/w/api.php?action=query&origin=*&prop=extracts&format=json&exintro=&titles=United_States`);\r\n    }\r\n\r\n    const apiCountryInfoUrl = `https://${lang}.wikipedia.org/w/api.php?action=query&origin=*&prop=extracts&format=json&exintro=&titles=${country}`;\r\n    return fetch(apiCountryInfoUrl);\r\n  },\r\n\r\n  fetchCapitalCoordinates: async (\r\n    countryCode: string,\r\n    capital: string,\r\n    lang = 'en'\r\n  ) => {\r\n    const url = `https://api.opentripmap.com/0.1/${lang}/places/geoname?name=${capital}&country=${countryCode}&apikey=${openTripMapApiKey}`;\r\n    return fetch(url);\r\n  },\r\n\r\n  fetchCapitalAttractions: async (\r\n    radius: number,\r\n    lon: number,\r\n    lat: number,\r\n    lang = 'en'\r\n  ) => {\r\n    const url = `https://api.opentripmap.com/0.1/${lang}/places/radius?radius=${radius}&lon=${lon}&lat=${lat}&rate=3&format=json&limit=6&apikey=${openTripMapApiKey}`;\r\n    return fetch(url);\r\n  },\r\n\r\n  fetchAttractionInfo: async (xid: string, lang = 'en') => {\r\n    const url = `https://api.opentripmap.com/0.1/${lang}/places/xid/${xid}?apikey=${openTripMapApiKey}`;\r\n    return fetch(url);\r\n  },\r\n\r\n  fetchAttractionVideo: async (country: string) => {\r\n    const apiKey = 'AIzaSyDoSce_kXLM52dh1hmFXUheB8pzSxbEXGs';\r\n    const url = `https://www.googleapis.com/youtube/v3/search?`;\r\n    const properties = `key=${apiKey}&type=video&part=snippet&maxResults=1&q=${country} attractions`;\r\n    return fetch(url + properties);\r\n  },\r\n  \r\n  fetchWeather: async (cityName: string) => {\r\n    const apiWeatherUrl = 'http://api.openweathermap.org/data/2.5/weather?q=';\r\n    const apiKey = '492003bfd44fb7dbe75df7d92a5e55d1';\r\n    return fetch(`${apiWeatherUrl}${cityName}&appid=${apiKey}&units=metric`);\r\n  },\r\n\r\n  fetchCurrency: async (countryCode: string) => {\r\n    const url = `https://api.exchangeratesapi.io/latest?base=USD&symbols=USD,EUR,${countryCode}`;\r\n    return fetch(url);\r\n  },\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { AttractionInfo } from '../../models/AttractionInfo.model';\r\nimport { CountryService } from '../../services/http.service';\r\n\r\nimport './AttractionCard.scss';\r\n\r\ntype AttractionCardProps = {\r\n  attraction: AttractionInfo;\r\n};\r\n\r\nconst AttractionCard = ({ attraction }: AttractionCardProps) => {\r\n  const [attractionInfo, setAttractionInfo] = useState(null);\r\n\r\n  useEffect(() => {\r\n    CountryService.fetchAttractionInfo(attraction.xid)\r\n      .then((response) => response.json())\r\n      .then((info) => setAttractionInfo(info));\r\n  }, []);\r\n\r\n  const errorText = '...loading';\r\n  const isInfoReceived = attractionInfo && !attractionInfo.error;\r\n  const text = isInfoReceived ? attractionInfo.wikipedia_extracts.text : errorText;\r\n  const imageUrl = isInfoReceived ? attractionInfo.preview.source : '';\r\n  const kinds = attraction.kinds.replace(/_/g, ' ').replace(/,/g, ', ');\r\n\r\n  return (\r\n    <div className=\"attraction\">\r\n      <div className=\"attraction__info\">\r\n        <h2>{attraction.name}</h2>\r\n        <h3>{kinds}</h3>\r\n        <div className=\"attraction__text\">{text}</div>\r\n      </div>\r\n\r\n      <img className=\"attraction__image\" src={imageUrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AttractionCard;\r\n","import { useEffect, useState } from 'react';\r\nimport Slider from 'react-slick';\r\n\r\nimport { AttractionInfo } from '../../models/AttractionInfo.model';\r\nimport { CountryService } from '../../services/http.service';\r\nimport AttractionCard from '../AttractionCard/AttractionCard';\r\n\r\nimport 'slick-carousel/slick/slick.css';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\nimport './Attractions.scss';\r\n\r\nimport { Country } from '../../models/CountryList.model';\r\n\r\ntype AttractionsProps = {\r\n  countryData: Country;\r\n};\r\n\r\nconst Attractions = ({ countryData }: AttractionsProps) => {\r\n  const [capitalAttractions, setCapitalAttractions] = useState(null);\r\n  const { alpha2Code, capital } = countryData;\r\n\r\n  useEffect(() => {\r\n    const searchRadius = 15000;\r\n\r\n    CountryService.fetchCapitalCoordinates(alpha2Code, capital)\r\n      .then((response) => response.json())\r\n      .then((coordinates) =>\r\n        CountryService.fetchCapitalAttractions(searchRadius, coordinates.lon, coordinates.lat)\r\n          .then((response) => response.json())\r\n          .then((attractions) => setCapitalAttractions(attractions))\r\n      );\r\n  }, []);\r\n\r\n  const sliderSettings = {\r\n    arrows: true,\r\n    dots: true,\r\n    infinite: true,\r\n    slidesToShow: 1,\r\n  };\r\n\r\n  let attractionsList = [];\r\n\r\n  if (capitalAttractions) {\r\n    attractionsList = capitalAttractions.map((attraction: AttractionInfo) => {\r\n      return (\r\n        <div key={attraction.xid}>\r\n          <AttractionCard attraction={attraction} />\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"attractions__slider\">\r\n      <Slider {...sliderSettings}>{attractionsList}</Slider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Attractions;\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport * as cityTimezones from 'city-timezones';\r\n\r\nimport { Country } from '../../models/CountryList.model';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ntype CapitalTimeProps = {\r\n  countryData: Country;\r\n};\r\n\r\nconst CapitalTime = ({ countryData }: CapitalTimeProps) => {\r\n  const [time, setTime] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const cityLookup = cityTimezones.lookupViaCity(countryData.capital);\r\n\r\n    const cityTimeZone = cityLookup[0] && cityLookup[0].timezone ? cityLookup[0].timezone : 'UTC';\r\n    const dateProperties: Intl.DateTimeFormatOptions = {\r\n      timeZone: cityTimeZone,\r\n      day: 'numeric',\r\n      month: 'short',\r\n      weekday: 'short',\r\n      hour: 'numeric',\r\n      hour12: false,\r\n      minute: 'numeric',\r\n      second: 'numeric',\r\n    };\r\n\r\n    setInterval(() => {\r\n      setTime(new Date().toLocaleString('en', dateProperties).replace(/:/g, '-'));\r\n    }, 1000);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"h3\">Capital Time:</div>\r\n      <div className=\"h4\">{`${time || '...loading'}`}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CapitalTime;\r\n","import { CountryDetail } from '../../models/CountryInfo.model';\r\n\r\nimport './CountryInfo.scss';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ntype CountryInfoProps = {\r\n  countryDetail: CountryDetail;\r\n};\r\n\r\nconst CountryInfo = ({ countryDetail }: CountryInfoProps) => {\r\n  if (!countryDetail) return <div>...loading</div>;\r\n\r\n  const createMarkup = () => {\r\n    return { __html: countryDetail.extract };\r\n  };\r\n\r\n  return (\r\n    <div className=\"country\">\r\n      <div className=\"country__description lead\" dangerouslySetInnerHTML={createMarkup()} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfo;\r\n","import { Country } from '../../models/CountryList.model';\r\n\r\nimport './CountryPageTitle.scss';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ntype CountryPageTitleProps = {\r\n  countryData: Country;\r\n};\r\n\r\nconst CountryPageTitle = ({ countryData }: CountryPageTitleProps) => {\r\n  if (!countryData) return <div>...loading</div>;\r\n  const { name, flag, capital } = countryData;\r\n\r\n  return (\r\n    <div\r\n      className=\"country__heading\"\r\n      style={{\r\n        width: '400px',\r\n        height: '400px',\r\n        backgroundImage: `url(${flag})`,\r\n        backgroundPosition: 'center',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n      }}\r\n    >\r\n      <div className=\"country__heading-info\">\r\n        <h2 className=\"country__name\">\r\n          {name}\r\n          <br />\r\n        </h2>\r\n        <h3 className=\"country__capital\">{capital}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPageTitle;\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { CountryService } from '../../services/http.service';\r\n\r\nconst CurrencyConverter = ({ countryCurrencies }: any) => {\r\n  if (!countryCurrencies) return <div>...loading</div>;\r\n\r\n  const [currency, setCurrency] = useState(null);\r\n\r\n  useEffect(() => {\r\n    CountryService.fetchCurrency(countryCurrencies[0].code)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCurrency(data);\r\n      });\r\n  }, []);\r\n\r\n  const currencyRates = [];\r\n\r\n  if (currency && currency.rates) {\r\n    for (const [key, value] of Object.entries(currency.rates)) {\r\n      const val = value as number;\r\n      const component = (\r\n        <div key={key}>\r\n          {key}: {val.toFixed(2)}\r\n        </div>\r\n      );\r\n\r\n      currencyRates.push(component);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"h4\">Currency name:</div>\r\n      <div className=\"h4\">{`${countryCurrencies[0].name} ${countryCurrencies[0].symbol}`}</div>\r\n      <div className=\"h4\">{currencyRates || '...loading'}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyConverter;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './LanguageSwitcher.scss';\n\nconst LanguageSwitcher: React.FC = () => {\n  return (\n    <select className=\"selectpicker\">\n      <option value=\"ru\">ru</option>\n      <option value=\"en\">en</option>\n      <option value=\"jp\">jp</option>\n    </select>\n  );\n};\n\nexport default LanguageSwitcher;\n","import React, { FocusEvent } from 'react';\nimport { FormControl } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Search.scss';\n\ntype SearchProps = {\n  searchHandler: Function;\n  searchValue: string;\n};\n\nconst Search: React.FC<SearchProps> = ({ searchHandler, searchValue }: SearchProps) => {\n  const handleFocus = (e: FocusEvent<any>) => e.target.select();\n\n  return (\n    <FormControl\n      className=\"search\"\n      onChange={(e) => searchHandler(e.target.value)}\n      onFocus={handleFocus}\n      placeholder=\"Enter Country Name\"\n      value={searchValue}\n    />\n  );\n};\n\nexport default Search;\n","import React from 'react';\r\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport LanguageSwitcher from '../LanguageSwitcher/LanguageSwitcher';\r\nimport Search from '../Search/Search';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './Header.scss';\r\n\r\ntype HeaderProps = {\r\n  isMainPage: boolean;\r\n  searchHandler?: Function;\r\n  searchValue?: string;\r\n};\r\n\r\nconst Header = ({ isMainPage, searchHandler, searchValue }: HeaderProps) => {\r\n  const search = isMainPage ? <Search searchHandler={searchHandler} searchValue={searchValue} /> : null;\r\n\r\n  return (\r\n    <Navbar bg=\"light\" className=\"container header\" expand=\"lg\">\r\n      <Link className=\"row\" to=\"/\">\r\n        <h1 className=\"header__logo\">Travel App</h1>\r\n      </Link>\r\n      {search}\r\n      <LanguageSwitcher />\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { GoogleMap, LoadScript } from '@react-google-maps/api';\r\nimport { Country } from '../../models/CountryList.model';\r\n\r\ntype MapProps = {\r\n  countryData: Country;\r\n};\r\n\r\nconst containerStyle = {\r\n  width: '400px',\r\n  height: '400px'\r\n};\r\n\r\nconst Map = ({ countryData }: MapProps) => {\r\n\r\n  const center = {\r\n    lat: countryData.latlng[0],\r\n    lng: countryData.latlng[1],\r\n  };\r\n  \r\n  return (\r\n    <LoadScript\r\n      googleMapsApiKey=\"AIzaSyAFYEI6Mv2SthzLCRsN_jTogm5aWJ8Ajt8\"\r\n    >\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={center}\r\n        zoom={5}\r\n      >\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  )};\r\n\r\nexport default Map;\r\n","import { useEffect, useState } from 'react';\r\nimport ReactPlayer from 'react-player';\r\n\r\nimport { CountryService } from '../../services/http.service';\r\n\r\nimport './Video.scss';\r\n\r\ntype VideoProps = {\r\n  countryName: string;\r\n};\r\n\r\nconst Video = ({ countryName }: VideoProps) => {\r\n  const [video, setVideo] = useState(null);\r\n\r\n  useEffect(() => {\r\n    CountryService.fetchAttractionVideo(countryName)\r\n      .then((response) => response.json())\r\n      .then((info) => setVideo(info));\r\n  }, []);\r\n\r\n  const youTubeUrl = 'https://www.youtube.com/watch?v=';\r\n  const isVideoReceived = video && video.items;\r\n\r\n  return (\r\n    <div className=\"video\">\r\n      <ReactPlayer controls url={isVideoReceived ? youTubeUrl + video.items[0].id.videoId : '...Loading'} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n","import { WeatherInfo } from '../../../models/Weather.model';\r\n\r\nimport './WeatherData.scss';\r\n\r\ntype WeatherInfoProps = {\r\n  weather: WeatherInfo;\r\n};\r\n\r\nexport const WeatherData = ({ weather }: WeatherInfoProps) => {\r\n  return (\r\n    <div className=\"weather\">\r\n      <div>Temperature: {weather.main.temp}</div>\r\n      <div>{weather.weather[0].description}</div>\r\n      <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { WeatherInfo } from '../../models/Weather.model';\r\nimport { CountryService } from '../../services/http.service';\r\nimport { WeatherData } from './WeatherData/WeatherData';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ntype WeatherProps = {\r\n  capital: string;\r\n};\r\n\r\nconst Weather = ({ capital }: WeatherProps) => {\r\n  const [weather, setWeather] = useState(null);\r\n\r\n  useEffect(() => {\r\n    CountryService.fetchWeather(capital)\r\n      .then((response) => response.json())\r\n      .then((weatherInfo: WeatherInfo) => setWeather(weatherInfo));\r\n  }, []);\r\n\r\n  return <div className=\"h3\">{weather ? <WeatherData weather={weather} /> : null}</div>;\r\n};\r\n\r\nexport default Weather;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { CountryDetail, CountryInfoResponse } from '../../models/CountryInfo.model';\r\nimport { CountryService } from '../../services/http.service';\r\nimport Attractions from '../Attractions/Attractions';\r\nimport CapitalTime from '../CapitalTime/CapitalTime';\r\nimport CountryInfo from '../CountryInfo/CountyInfo';\r\nimport CountryPageTitle from '../CountryPageTitle/CountryPageTitle';\r\nimport CurrencyConverter from '../CurrencyConverter/CurrencyConverter';\r\nimport Header from '../Header/Header';\r\nimport Map from '../Map/Map';\r\nimport Video from '../Video/Video';\r\nimport Weather from '../Weather/Weather';\r\n\r\nimport './CountryPage.scss';\r\n\r\nconst CountryPage = () => {\r\n  const [countryDetail, setCountryDetail] = useState({} as CountryDetail);\r\n  const [countryData, setCountryData] = useState(null);\r\n\r\n  const location = useLocation();\r\n  const countryName = location.pathname.split('/')[1];\r\n\r\n  useEffect(() => {\r\n    CountryService.fetchCountryInfoByName(countryName)\r\n      .then((response) => response.json())\r\n      .then((countryInfo: CountryInfoResponse) => setCountryDetail(Object.values(countryInfo.query.pages)[0]));\r\n\r\n    CountryService.fetchCountry(countryName)\r\n      .then((response) => response.json())\r\n      .then((country) => setCountryData(country[0]));\r\n  }, []);\r\n  console.log(countryData);\r\n  return (\r\n    <div className=\"country-page\">\r\n      <Header isMainPage={false} />\r\n      <Container>\r\n        <Row>\r\n          <div className=\"country-page__widget\">\r\n            {countryData ? <CapitalTime countryData={countryData} /> : null}\r\n            {countryData && <Weather capital={countryData.capital} />}\r\n            {countryData && <CurrencyConverter countryCurrencies={countryData.currencies} />}\r\n          </div>\r\n          <CountryPageTitle countryData={countryData} />\r\n          {countryData ? <Map countryData={countryData} /> : null}\r\n        </Row>\r\n      </Container>\r\n      <CountryInfo countryDetail={countryDetail} />\r\n      <Video countryName={countryName} />\r\n      {countryData ? <Attractions countryData={countryData} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPage;\r\n","import { ListGroup } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Footer.scss';\n\nconst Footer: React.FC = () => {\n  return (\n    <div className=\"bg-light container footer \">\n      <div className=\"row\">\n        <ListGroup horizontal>\n          <ListGroup.Item>\n            <a href=\"https://github.com/PavelAsadchy\">Pavel Asadchy</a>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <a href=\"https://github.com/KaguraDun\">Vasily Kovnev</a>\n          </ListGroup.Item>\n        </ListGroup>\n      </div>\n\n      <span className=\"row\">2021</span>\n\n      <div className=\"row\">\n        <img alt=\"\" className=\" logo\" src=\"../../rs_school_js.svg\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import { Card } from 'react-bootstrap';\r\n\r\nimport { Country } from '../../models/CountryList.model';\r\n\r\nimport './CountryCard.scss';\r\n\r\ntype CountryCardProps = {\r\n  item: Country;\r\n};\r\n\r\nconst CountryCard = ({ item }: CountryCardProps) => {\r\n  const { name, nativeName, capital, flag } = item;\r\n\r\n  return (\r\n      <Card>\r\n        <Card.Img className=\"card__img\" src={flag} variant=\"top\" />\r\n        <Card.Body>\r\n          <Card.Title>{name}</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">{capital}</Card.Subtitle>\r\n          <Card.Text>Native name: {nativeName}</Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n  );\r\n};\r\n\r\nexport default CountryCard;\r\n","import { Link } from 'react-router-dom';\n\nimport { Country } from '../../models/CountryList.model';\nimport CountryCard from '../CountryCard/CountryCard';\n\nimport './SearchResults.scss';\n\ntype SearchResultsProps = {\n  searchResult: Country[];\n};\n\nexport const SearchResults = ({ searchResult }: SearchResultsProps) => {\n  return (\n    <div className=\"search-container\">\n      {searchResult.map((item: Country) => (\n        <div key={item.name}>\n          <Link to={`/${item.name.toLocaleLowerCase()}`}>\n            <CountryCard item={item} />\n          </Link>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { WorldMap } from 'react-svg-worldmap';\r\n\r\nimport { WordlMapData } from '../../models/CountryList.model';\r\n\r\nimport './WorldMapBlock.scss';\r\n\r\ntype WorldMapBlockProps = {\r\n  countries: WordlMapData[];\r\n  onClickAction: any;\r\n};\r\n\r\nexport const WorldMapBlock = ({ countries, onClickAction }: WorldMapBlockProps) => {\r\n  return (\r\n    <div className=\"world-map\" style={{ display: 'flex', justifyContent: 'center' }}>\r\n      <WorldMap\r\n        backgroundColor=\"-webkit-linear-gradient(to top, #cfdef3, #e0eafc)\"\r\n        color=\"red\"\r\n        data={countries}\r\n        onClickFunction={onClickAction}\r\n        size=\"xxl\"\r\n        title=\"Click on country to know more\"\r\n        value-suffix=\"people\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from 'react';\n\nimport { Country } from '../../models/CountryList.model';\nimport Header from '../Header/Header';\nimport { SearchResults } from '../SearchResult/SearchResults';\nimport { WorldMapBlock } from '../WorldMapBlock/WorldMapBlock';\n\ntype MainPageProps = {\n  countriesList: Country[];\n  randomCountriesList: Country[];\n};\n\nconst MainPage = ({ countriesList, randomCountriesList }: MainPageProps) => {\n  const [searchValue, setSearchValue] = useState('');\n\n  const searchHandler = (value: string) => setSearchValue(value);\n\n  const header = <Header isMainPage searchHandler={searchHandler} searchValue={searchValue} />;\n\n  if (!countriesList || !randomCountriesList) return <div>{header}</div>;\n\n  const searchResultCountries = countriesList.filter(\n    (country: Country) =>\n      country.name.toLocaleLowerCase().includes(searchValue.toLocaleLowerCase()) ||\n      country.capital.toLocaleLowerCase().includes(searchValue.toLocaleLowerCase())\n  );\n\n  const worldMapData = countriesList.map((country: Country) => {\n    return {\n      country: country.alpha2Code,\n      value: country.population,\n    };\n  });\n\n  const onCountryClickHandler = (\n    event: React.MouseEvent<SVGElement, Event>,\n    countryName: string,\n    isoCode: string,\n    value: string,\n    prefix?: string,\n    suffix?: string\n  ) => {\n    const clickedCountry = countriesList.find(\n      (country: Country) => country.alpha2Code.toLocaleLowerCase() === isoCode.toLocaleLowerCase()\n    );\n    setSearchValue(clickedCountry.name);\n  };\n\n  return (\n    <div>\n      {header}\n      {searchValue ? (\n        <SearchResults searchResult={searchResultCountries} />\n      ) : (\n        <SearchResults searchResult={randomCountriesList} />\n      )}\n      <WorldMapBlock countries={worldMapData} onClickAction={onCountryClickHandler} />\n    </div>\n  );\n};\n\nexport default MainPage;\n","import { useEffect, useState } from 'react';\r\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport { Country } from '../../models/CountryList.model';\r\nimport { CountryService } from '../../services/http.service';\r\nimport CountryPage from '../CountryPage/CountryPage';\r\nimport Footer from '../Footer/Footer';\r\nimport MainPage from '../MainPage/MainPage';\r\n\r\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\nfunction shuffleArray(array: Country[]) {\r\n  const newArr = array.slice();\r\n\r\n  for (let i = newArr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const temp = newArr[i];\r\n    newArr[i] = newArr[j];\r\n    newArr[j] = temp;\r\n  }\r\n  return newArr;\r\n}\r\n\r\nconst TravelApp = () => {\r\n  const [countriesList, setCountriesList] = useState(null);\r\n  const [randomCountriesList, setRandomCountriesList] = useState(null);\r\n  const numberOfRandomCountries = 8;\r\n\r\n  useEffect(() => {\r\n    CountryService.fetchAllCountries()\r\n      .then((response) => response.json())\r\n      .then((countries: Country[]) => {\r\n        setCountriesList(countries);\r\n        const shuffledArray = shuffleArray(countries).slice(0, numberOfRandomCountries);\r\n        setRandomCountriesList(shuffledArray);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Route\r\n          component={() => <MainPage countriesList={countriesList || null} randomCountriesList={randomCountriesList || null} />}\r\n          exact\r\n          path=\"/\"\r\n        />\r\n        <Route exact path=\"/:country\" render={() => <CountryPage />} />\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default TravelApp;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFCP, getFID, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.scss';\n\nimport { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport TravelApp from './components/TravelApp/TravelApp';\nimport reportWebVitals from './reportWebVitals';\n\nrender(\n  <StrictMode>\n    <TravelApp />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}